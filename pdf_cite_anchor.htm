<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>PDF.js Highlight and Statistics Example</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.7.570/pdf.min.js"></script>
    <style>
        #pdfViewer {
            width: 100%;
            height: 100vh;
        }
        #loadingIndicator {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div id="loadingIndicator">Loading PDF...</div>
    <canvas id="pdfViewer"></canvas>
    <script>
        const params = new URLSearchParams(window.location.search);
        const url = params.get('site');
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;
        const hash = window.location.hash;
        const searchString = decodeURIComponent(hash.replace('#:~:text=', '').replace(/\s+/g, ' ').trim());
        const searchRegex = new RegExp(searchString.replace(/\s+/g, '\\s*'), 'i');
        const loadingIndicator = document.getElementById('loadingIndicator');

        console.log(`Fetching PDF from: ${proxyUrl}`);
        fetch(proxyUrl)
            .then(response => {
                console.log('Received response from proxy');
                loadingIndicator.textContent = 'Received response from proxy';
                return response.json();
            })
            .then(data => {
                console.log('Parsing response data');
                // Strips the data URL prefix:
                const base64Data = data.contents.replace(/^data:application\/pdf;base64,/, '');
                console.log('Base64 data length:', base64Data.length);
                const binaryString = atob(base64Data);
                const len = binaryString.length;
                console.log('Binary string length:', len);
                const pdfData = new Uint8Array(len);
                for (let i = 0; i < len; i++) {
                    pdfData[i] = binaryString.charCodeAt(i);
                }
                console.log('PDF data created, length:', pdfData.length);
                return pdfjsLib.getDocument({data: pdfData}).promise;
            })
            .then(pdf => {
                console.log('PDF loaded');
                const numPages = pdf.numPages;
                console.log('Number of pages:', numPages);
                let totalCharacters = 0;
                let totalWords = 0;

                const findTextInPage = pageNum => {
                    return pdf.getPage(pageNum).then(page => {
                        return page.getTextContent().then(textContent => {
                            // Normalises text by removing excessive spaces:
                            const text = textContent.items.map(item => item.str).join(' ').replace(/\s+/g, ' ').trim();
                            totalCharacters += text.length;
                            totalWords += text.split(/\s+/).length;

                            if (searchRegex.test(text)) {
                                console.log(`Found "${searchString}" on page ${pageNum}`);
                                const viewport = page.getViewport({scale: 1.5});
                                const canvas = document.getElementById('pdfViewer');
                                const context = canvas.getContext('2d');
                                canvas.height = viewport.height;
                                canvas.width = viewport.width;

                                // Render the page
                                page.render({canvasContext: context, viewport: viewport}).promise.then(() => {
                                    // Highlight the text and scroll to it:
                                    textContent.items.forEach(item => {
                                        const normalisedItemStr = item.str.replace(/\s+/g, ' ').trim();
                                        if (searchRegex.test(normalisedItemStr)) {
                                            const tx = pdfjsLib.Util.transform(viewport.transform, item.transform);
                                            context.save();
                                            context.globalAlpha = 0.5;
                                            context.fillStyle = 'yellow';
                                            context.fillRect(tx[4], tx[5] - item.height, item.width, item.height);
                                            context.restore();

                                            // Scroll to the highlighted text
                                            const scrollX = tx[4] - canvas.width / 2 + item.width / 2;
                                            const scrollY = tx[5] - canvas.height / 2 + item.height / 2;
                                            window.scrollTo(scrollX, scrollY);
                                        }
                                    });
                                    loadingIndicator.style.display = 'none';
                                });
                                return true; // Found the text, stop searching
                            }
                            return false; // Continue searching
                        });
                    });
                };

                const searchPages = async () => {
                    for (let pageNum = 1; pageNum <= numPages; pageNum++) {
                        loadingIndicator.textContent = `Loading PDF... Page ${pageNum} of ${numPages}`;
                        const found = await findTextInPage(pageNum);
                        if (found) break;
                    }
                    console.log(`Total characters: ${totalCharacters}`);
                    console.log(`Estimated word count: ${totalWords}`);
                    console.log(`Average words per page: ${(totalWords / numPages).toFixed(2)}`);
                    loadingIndicator.style.display = 'none';
                };

                searchPages();
            })
            .catch(error => {
                console.error('Error:', error);
                loadingIndicator.textContent = 'Error loading PDF.';
            });
    </script>
</body>
</html>